<template>
  <{COMPONENT_TYPE}
    :title="titleMap[mode]"
    v-model="visible"
    :width="700"
    destroy-on-close
    append-to-body
    @closed="emits('closed')"
  >
    <el-form
      :model="form"
      :rules="rules"
      ref="dialogForm"
      label-width="80px"
      :style="'{COMPONENT_TYPE}' === 'el-drawer' ? 'padding:0 20px' : ''"
    >
      {FORM_LIST}
    </el-form>
    <template #footer>
      <el-button @click="visible = false">取 消</el-button>
      <el-button type="primary" :loading="isSaveing" @click="submit()">保 存</el-button>
    </template>
  </{COMPONENT_TYPE}>
</template>

<script setup>
  import { ref, reactive, defineEmits, defineExpose, onMounted } from 'vue'
  import { ElMessage } from 'element-plus'
  import {BUSINESS_EN_NAME} from '@/api/apis/{PACKAGE_NAME}/{BUSINESS_EN_NAME}'
  import systemDict from '@/api/apis/system/dataDict'
{IMPORT_COMPONENT}

  const emits = defineEmits(['success', 'closed'])

  const mode = ref('add')
  const treeList = ref([])
  const visible = ref(false)
  const isSaveing = ref(false)
  const dialogForm = ref(null)

  const titleMap = reactive({ add: '新增{BUSINESS_NAME}', edit: '编辑{BUSINESS_NAME}' })
  const dictData = reactive({
    {DICT_DATA}
  })
  const form = reactive({
    {FORM_DATA}
  })
  const rules = reactive({
    {REQUIRED_LIST}
  })

  onMounted(async () => {
    await getDictData()
  })

  const getDictData = () => {
    {DICT_LIST}
  }

  const open = (type = 'add') => {
    mode.value = type
    visible.value = true
    {TREE_REQUEST}
  }

  const submit = () => {
    dialogForm.value.validate(async (valid) => {
      if (valid) {
        isSaveing.value = true
        const res = mode.value === 'add' ? await {BUSINESS_EN_NAME}.save(form) : await {BUSINESS_EN_NAME}.update(form.id, form)
        if (res.success) {
          emits('success', form, mode.value)
          visible.value = false
          ElMessage.success(res.message)
        } else {
          ElMessage.error(res.message)
        }
        isSaveing.value = false
      }
    })
  }

  const setData = (data) => {
    for (let k in form) {
      if (data[k] || data[k] === 0) {
        form[k] = data[k]
      }
    }
  }
{UPLOAD_IMAGE}
{UPLOAD_FILE}
  defineExpose({
    open, setData
  })
</script>
